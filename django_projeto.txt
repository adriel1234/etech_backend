
passos para criar uma projeto no django

(criar uma database no postgres com nome tecommerce)

1 - criar a venv: python -m venv .venv

2- selecionar a venv: .\.venv\Scripts\activate

3 - instalar o django: pip install django

4 - criar o projeto: django-admin startproject tecommerce

5 - criar o app teste ou core: python manage.py startapp teste

6 - criar o arquivo tecommerce.config(nome do projeto) e adicionar as linhas:

DB_ENGINE=django.db.backends.postgresql_psycopg2
DB_HOST=localhost
DB_PORT=5432
DB_NAME=tecommerce
DB_USER=postgres
DB_PASS=123456

7 - instalar as libs necessárias dentro do arquivo requirements.txt comando: pip install -r requirements.txt
 
asgiref==3.8.1
Django==5.1.1
django-filter==24.3
djangorestframework==3.15.2
psycopg2==2.9.9
python-dotenv==1.0.1
sqlparse==0.5.1
tzdata==2024.2

8 - editar no settings adicionar essa configurações:

import os
from pathlib import Path
from os.path import  exists
from dotenv import load_dotenv
# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
tecommerce_conf = os.path.join(BASE_DIR,'tecommerce.config')

if exists(tecommerce_conf):
    load_dotenv(tecommerce_conf)

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'teste.apps.TesteConfig',
    'rest_framework',
    'django_filters',
]

DATABASES = {
    'default': {
        'ENGINE': os.environ.get('DB_ENGINE'),
        'NAME': os.environ.get('DB_NAME'),
        'HOST': os.environ.get('DB_HOST'),
        'PORT': os.environ.get('DB_PORT'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASS')
    },
}

adicionar na ultima linha:

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
}

9 - criar o models.py no app teste:

from django.db import models

# Create your models here.

class ModelBase(models.Model):
    id = models.BigAutoField(db_column='id',null=False,primary_key=True)
    created_at = models.DateTimeField(db_column='dt_created_at',null=False,auto_now_add=True)
    modified_at = models.DateTimeField(db_column='dt_modified_at',null=False,auto_now=True)

    active = models.BooleanField(db_column='cs_active',null=False,default=True)

    class Meta:
        abstract = True
        managed = True

class Client(ModelBase):
    name = models.CharField(db_column='tx_name',null=False,max_length=70)
    age = models.IntegerField(db_column='nb_age',null=False)
    rg = models.CharField(db_column='tx_rg',max_length=12,null=False)
    cpf = models.CharField(db_column='tx_cpf',null=False,max_length=12,unique=True)
    class Meta:
        db_table = 'client'
        managed = True

class ClientSerializer(serializers.ModelSerializer):
    class Meta:
        model = models.Client
        exclude = ['created_at']


10 - criar o filters.py  no app teste:

from django_filters import rest_framework as filters
from teste import models

# Filtro de pesquisa
LIKE = 'unaccent__icontains'
EQUALS = 'exact'
STARTS_WITH = 'startswith'
GT = 'gt'
GTE = 'gte'
LT = 'lt'
LTE = 'lte'
IN = 'in'


class ClientFilter(filters.FilterSet):
    name = filters.CharFilter(lookup_expr=LIKE)
    cpf_sw = filters.CharFilter(field_name='cpf', lookup_expr=STARTS_WITH)
    cpf_equals = filters.CharFilter(field_name='cpf', lookup_expr=EQUALS)
    rg = filters.CharFilter(lookup_expr=STARTS_WITH)
    age = filters.NumberFilter(lookup_expr=EQUALS)

    class Meta:
        model = models.Client
        fields = ['name', 'cpf_sw', 'cpf_equals', 'rg', 'age']

11 - criar serializers.py  no app teste:

from rest_framework import serializers
from teste import models

12 - criar o viewsets.py  no app teste:

from rest_framework import viewsets, permissions
from teste import models, serializers, filters


class ClientViewSet(viewsets.ModelViewSet):
    queryset = models.Client.objects.all()
    serializer_class = serializers.ClientSerializer
    filterset_class = filters.ClientFilter
    permission_classes = {permissions.IsAuthenticated}




13 - criar urls.py  no app teste:

from rest_framework import routers
from teste import viewsets

router = routers.DefaultRouter()

router.register('client', viewsets.ClientViewSet)

urlpatterns = router.urls

14 - configurar urls.py no tecommerce:

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api-auth', include('rest_framework.urls')),
    path('teste/', include('teste.urls')),
]

15 - rodar os comandos de migração
 - python manage.py makemigrations
 - python manage.py showmigrations
 - python manage.py migrate

16 - criar criar um usuário comando: python manage.py createsuperuser

17 - fazer migration para fazer a instalação do unaccent no banco:

# Generated by Django 5.1.1 on 2024-10-07 23:12

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('teste', '0002_alter_client_table_alter_employee_table_and_more'),
    ]

    operations = [
        migrations.RunSQL("CREATE EXTENSION IF NOT EXISTS unaccent;"),

    ]


